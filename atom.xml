<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XJCherish&#39;notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-08T00:32:04.890Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XJCherish</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6</title>
    <link href="http://yoursite.com/2017/07/22/ES6/"/>
    <id>http://yoursite.com/2017/07/22/ES6/</id>
    <published>2017-07-22T07:50:04.000Z</published>
    <updated>2017-08-08T00:32:04.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h2><p>let: (1): 块级作用域之内有效 (2): 严格模式：变量未定义报错  (3): 不能重复定义变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">letDemo</span></span>() &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 3; i++) &#123;</div><div class="line">		console.log(i); //1,2 块作用域</div><div class="line">	&#125;</div><div class="line">	console.log(i);//报错,严格模式</div><div class="line">	<span class="built_in">let</span> a = 1;</div><div class="line">	<span class="built_in">let</span> a = 2;</div><div class="line">	console.log(a);//报错,不能重复定义变量</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>const: 常量不能修改，同块级作用域，声明必须赋值。如果定义的是对象，是可以修改的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">constDemo</span></span>() &#123;</div><div class="line">	const PI = 3.1415926;</div><div class="line">	PI = 6;</div><div class="line">	console.log(PI);//报错,常量值不能修改</div><div class="line">	const k = &#123;</div><div class="line">		a: 1</div><div class="line">	&#125;</div><div class="line">	k.b = 3;</div><div class="line">	console.log(k);//&#123;a: 1,b: 3&#125; 对象是引用类型，可以修改</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p><strong> 数组解构赋值 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="built_in">let</span> a,b,rest;</div><div class="line">	[a,b] =[1,2];</div><div class="line">	console.log(a,b);//1</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">	<span class="built_in">let</span> a,b,rest;</div><div class="line">	[a,b....rest] =[1,2,3,4,5,6];</div><div class="line">	console.log(a,b);//1,2,[3,4,5,6]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 对象解构赋值 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="built_in">let</span> a,b;</div><div class="line">	(&#123;a,b&#125; =&#123;a:1,b:2&#125;);</div><div class="line">	console.log(a,b);//1,2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="built_in">let</span> a,b;</div><div class="line">	(&#123;a,b,c=3&#125; =&#123;a:1,b:2&#125;);</div><div class="line">	console.log(a,b);//1,2,3</div><div class="line">&#125;</div><div class="line">s</div><div class="line">&#123;</div><div class="line">	<span class="built_in">let</span> a,b;</div><div class="line">	(&#123;a,b,c&#125; =&#123;a:1,b:2&#125;);</div><div class="line">	console.log(a,b);//1,2,undefind</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;let和const&quot;&gt;&lt;a href=&quot;#let和const&quot; class=&quot;headerlink&quot; title=&quot;let和const&quot;&gt;&lt;/a&gt;let和const&lt;/h2&gt;&lt;p&gt;let: (1): 块级作用域之内有效 (2): 严格模式：变量未定义报错  (3)
    
    </summary>
    
      <category term="note" scheme="http://yoursite.com/categories/note/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>HTML和HTML5知识点</title>
    <link href="http://yoursite.com/2017/07/22/HTML%E5%92%8CHTML5%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/07/22/HTML和HTML5知识点/</id>
    <published>2017-07-22T07:50:04.000Z</published>
    <updated>2017-07-22T13:37:17.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><strong> &lt; meta name = “description” content = “” &gt; </strong><br>只要设置”description”，那么百度搜索结果就能显示这些语句，这个叫SEO搜索引擎优化</p>
<p><strong> &lt; meta name = “keywords” content = “” &gt; </strong><br>设置关键字，告诉搜索引擎，这个网页是干嘛用的，提高搜索命中率。<br>设置网页的title标题，也能助于SEO搜索引擎优化</p>
<p><strong> HTML中所有文字之间，如果有空格、换行、tab，都将作为一个空格显示 </strong></p>
<p><strong> 容器级的标签里面可以放置任何标签；文本级的标签只能放文字、图片、表单元素；其它的一律不能放。</strong><br><a id="more"></a></p>
<ul>
<li>文本级：p, span, a, b, i, u, em;</li>
<li>容器级：div, h, li, dt, dd; </li>
</ul>
<p><strong> 字符 </strong><br>(1)、&amp;lt: 小于;&emsp;&emsp;(2)、&amp;gt: 大于;&emsp;&emsp;(3)、&amp;copy: ©;&emsp;&emsp;(4)、&amp;nbsp: 空格;&emsp;&emsp;(5)、&lt; br &gt;: 换行;</p>
<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>&emsp;&emsp;HTML5定义了一系列新元素，如新语义标签、智能表单、多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一些Javascript API，如地理定位、重力感应、硬件访问等，可以在浏览器内实现类原生应用，甚至结合Canvas我们可开发网页版游戏。</p>
<h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><ul>
<li>&lt; nav&gt;&emsp; 表示导航</li>
<li>&lt; header&gt;&emsp; 表示页眉</li>
<li>&lt; footer&gt;&emsp; 表示页脚</li>
<li>&lt; section&gt;&emsp; 表示区块</li>
<li>&lt; article&gt;&emsp; 表示文章 如文章、评论、帖子、博客</li>
<li>&lt; aside&gt;&emsp; 表示侧边栏 如文章的侧栏</li>
<li>&lt; figure&gt;&emsp; 表示媒介内容分组 与 ul &gt; li 做个比较</li>
<li>&lt; mark&gt;&emsp; 表示标记 (带用“UI”，不怎么用)</li>
<li>&lt; progress&gt;&emsp; 表示进度 (带用“UI”，不怎么用)</li>
<li>&lt; time&gt;&emsp; 表示日期</li>
</ul>
<h3 id="兼容处理"><a href="#兼容处理" class="headerlink" title="兼容处理"></a>兼容处理</h3><p>将HTML5的新标签全部通过document.createElement(‘tagName’)来创建一遍，这样IE低版本也能正常解析HTML5新标签了;<br>在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载三方的一个JS库来解决兼容问题.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt; !--[<span class="keyword">if</span> lte IE 8]&gt;</div><div class="line">&lt;script src = <span class="string">"js/html5shiv.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt; ![endif]</div></pre></td></tr></table></figure></p>
<h3 id="智能表单"><a href="#智能表单" class="headerlink" title="智能表单"></a>智能表单</h3><h4 id="输入类型"><a href="#输入类型" class="headerlink" title="输入类型"></a>输入类型</h4><ul>
<li>email：输入email格式</li>
<li>tel：手机号码  </li>
<li>url：只能输入url格式</li>
<li>number：只能输入数字</li>
<li>search：搜索框</li>
<li>range：范围 滑动条</li>
<li>color：拾色器</li>
<li>time：时间</li>
<li>date：日期 不是绝对的</li>
<li>datetime：时间日期</li>
<li>month：月份</li>
<li>week：星期</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"email"</span> value=<span class="string">"some@email.com"</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><p>&lt; datalist&gt; 数据列表，与input 配合使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> &lt;input <span class="built_in">type</span>=”text” list=”data”&gt;</div><div class="line"> &lt;datalist id=”data”&gt;</div><div class="line"> 	&lt;option&gt;男&lt;/option&gt;</div><div class="line"> 	&lt;option&gt;女&lt;/option&gt;</div><div class="line"> 	&lt;option&gt;不详&lt;/option&gt; </div><div class="line">&lt;/datalist&gt;</div></pre></td></tr></table></figure></p>
<p>&lt; progress&gt;&emsp;对象的下载进度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;progress&gt;</div><div class="line">	&lt;span id=<span class="string">"objprogress"</span>&gt;85&lt;/span&gt;%</div><div class="line">&lt;/progress&gt;</div></pre></td></tr></table></figure></p>
<p>&lt; output&gt;   不可当做数据提交？<br>&lt; meter&gt;   表示度量器，不建议用作进度条<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meter  value=<span class="string">"81"</span>    min=<span class="string">"0"</span> max=<span class="string">"100"</span>  low=<span class="string">"60"</span>  high=<span class="string">"80"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h4 id="keygen-元素"><a href="#keygen-元素" class="headerlink" title="keygen 元素"></a>keygen 元素</h4><p>&emsp;&emsp;keygen 元素的作用是提供一种验证用户的可靠方法。<br>&emsp;&emsp;keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键，    一个是私钥，一个公钥。<br>&emsp;&emsp;私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。</p>
<h4 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h4><ul>
<li>placeholder： 占位符</li>
<li>autofocus： 获取焦点</li>
<li>multiple： 文件上传多选或多个邮箱地址  </li>
<li>autocomplete： 自动完成，用于表单元素，也可用于表单自身(on/off)</li>
<li>form:指定表单项属于哪个form，处理复杂表单时会需要</li>
<li>novalidate： 关闭验证，可用于&lt; form&gt;标签</li>
<li>required： 必填项</li>
<li>pattern： 正则表达式 验证表单</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">手机号:&lt;input <span class="built_in">type</span>=<span class="string">"tel"</span> name=<span class="string">"tel"</span> required=<span class="string">"required"</span>       pattern=<span class="string">"^(\+86)?1[3,5,8](\d&#123;9&#125;)$"</span>&gt;</div></pre></td></tr></table></figure>
<h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><p>oninput 用户输入内容时触发，可用于移动端输入字数统计<br>oninvalid 验证不通过时触发</p>
<h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p>HTML5通过&lt; audio&gt;标签来解决音频播放的问题。</p>
<ul>
<li>autoplay：自动播放</li>
<li>controls：是否显不默认播放控件</li>
<li>loop：循环播放</li>
<li>preload：预加载 同时设置autoplay时些属性失效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;audio controls=<span class="string">"controls"</span>&gt;</div><div class="line">	&lt;<span class="built_in">source</span> src=<span class="string">"img/music.ogg"</span> <span class="built_in">type</span>=<span class="string">"audio/ogg"</span>/&gt;</div><div class="line">    &lt;<span class="built_in">source</span> src=<span class="string">"img/music.mp3"</span> <span class="built_in">type</span>=<span class="string">"audio/mpeg"</span>/&gt;</div><div class="line">    &lt;<span class="built_in">source</span> src=<span class="string">"img/music.wav"</span>/&gt; </div><div class="line">    您的浏览器不支持HTML音频播放功能</div><div class="line">&lt;/audio&gt;</div></pre></td></tr></table></figure>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>HTML5通过&lt; video&gt;标签来解决音频播放的问题。</p>
<ul>
<li>autoplay：自动播放</li>
<li>controls：是否显不默认播放控件</li>
<li>loop：循环播放</li>
<li>preload：预加载 同时设置autoplay时些属性失效</li>
<li>width：设置播放窗口宽度</li>
<li>height：设置播放窗口的高度</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;video controls=<span class="string">"controls"</span>&gt;</div><div class="line">    &lt;<span class="built_in">source</span> src=<span class="string">"img/music.ogg"</span> <span class="built_in">type</span>=<span class="string">"video/ogg"</span>/&gt;</div><div class="line">    &lt;<span class="built_in">source</span> src=<span class="string">"img/music.mp4"</span> <span class="built_in">type</span>=<span class="string">"video/mp4"</span>/&gt;</div><div class="line">    您的浏览器不支持HTML视频播放功能</div><div class="line">&lt;/video&gt;</div></pre></td></tr></table></figure>
<h3 id="DOM扩展"><a href="#DOM扩展" class="headerlink" title="DOM扩展"></a>DOM扩展</h3><p>&emsp;&emsp;document.querySelector(‘div’) 通过CSS选择器获取元素，符合匹配条件的第1个元素。<br>&emsp;&emsp;document.querySelectorAll(‘selector’) 通过CSS选择器获取元素，以类数组形式存在。</p>
<h4 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h4><ul>
<li>Node.classList.add(‘class’)：添加class</li>
<li>Node.classList.remove(‘class’)：移除class</li>
<li>Node.classList.toggle(‘class’)：切换class，有则移除，无则添加</li>
<li>Node.classList.contains(‘class’)：检测是否存在class</li>
<li>Node指一个有效的DOM节点，是一个通称。</li>
</ul>
<h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><p>&emsp;&emsp;在HTML5中我们可以自定义属性，其格式如下data-*=” “，例如data-info=”我是自定义属性”，通过Node.dataset[‘info’] 我们便可以获取到自定义的属性值。<br>&emsp;&emsp;Node.dataset是以类对象形式存在的，当我们如下格式设置时，则需要以驼峰格式才能正确获取data-my-name=”attr”，获取：node.dataset[‘myName’]。</p>
<h3 id="新增API"><a href="#新增API" class="headerlink" title="新增API"></a>新增API</h3><h4 id="多媒体-1"><a href="#多媒体-1" class="headerlink" title="多媒体"></a>多媒体</h4><p>方法：</p>
<ul>
<li>load()： 加载</li>
<li>play()： 播放</li>
<li>pause()： 暂停</li>
</ul>
<p>属性：</p>
<ul>
<li>currentTime：视频播放的当前进度、</li>
<li>duration：视频的总时间</li>
<li>paused：视频播放的状态.</li>
</ul>
<p>事件：</p>
<ul>
<li>oncanplay：事件在用户可以开始播放视频/音频（audio/video）时触发。</li>
<li>ontimeupdate：通过该事件来报告当前的播放进度.</li>
<li>onended：播放完时触发</li>
</ul>
<p>全屏：</p>
<ul>
<li>video.webkitRequestFullScreen();</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">      </div><div class="line">      var h = document.querySelector(<span class="string">'h'</span>);</div><div class="line">      var p = document.querySelector(<span class="string">'p'</span>);</div><div class="line">      h.addEventListener(<span class="string">'click'</span>, <span class="keyword">function</span>(e) &#123;</div><div class="line">        <span class="keyword">if</span> (p.webkitRequestFullScreen)</div><div class="line">          p.webkitRequestFullScreen();</div><div class="line">        <span class="keyword">else</span></div><div class="line">          console.log(<span class="string">'不支持'</span>);</div><div class="line">        e.preventDefault();</div><div class="line">      &#125;);</div><div class="line">    &#125;)()</div></pre></td></tr></table></figure>
<h4 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h4><p>在HTML5的规范中，我们可以通过为元素增加draggable=”true”来设置此元素是否可以进行拖拽操作，其中图片、链接默认是开启的。</p>
<h5 id="拖拽元素"><a href="#拖拽元素" class="headerlink" title="拖拽元素"></a>拖拽元素</h5><p>页面中设置了draggable=”true”属性的元素</p>
<h5 id="目标元素"><a href="#目标元素" class="headerlink" title="目标元素"></a>目标元素</h5><p>页面中任何一个元素都可以成为目标元素</p>
<h5 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h5><p>拖拽元素：</p>
<ul>
<li>ondrag：应用于拖拽元素，整个拖拽过程都会调用</li>
<li>ondragstart：应用于拖拽元素，当拖拽开始时调用</li>
<li>ondragleave：应用于拖拽元素，当鼠标离开拖拽元素时调用</li>
<li>ondragend：应用于拖拽元素，当拖拽结束时调用</li>
</ul>
<p>目标元素：</p>
<ul>
<li>ondragenter：应用于目标元素，当拖拽元素进入时调用</li>
<li>ondragover：应用于目标元素，当停留在目标元素上时调用</li>
<li>ondrop：应用于目标元素，当在目标元素上松开鼠标时调用</li>
<li>ondragleave：应用于目标元素，当鼠标离开目标元素时调用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    <span class="comment">#target &#123;</span></div><div class="line">      padding: 20px;</div><div class="line">      height: 300px;</div><div class="line">      border: 5px dashed <span class="comment">#c0c0c0;</span></div><div class="line">      color: <span class="comment">#e0e0e0;</span></div><div class="line">      font-size: 40px;</div><div class="line">      line-height: 260px;</div><div class="line">      text-align: center;</div><div class="line">      -webkit-user-select: none;</div><div class="line">      cursor: pointer;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">#target.actived &#123;</span></div><div class="line">      border-color: <span class="comment">#888;</span></div><div class="line">      color: <span class="comment">#eaeaea;</span></div><div class="line">      box-shadow: 0 0 80px <span class="comment">#e0e0e0 inset;</span></div><div class="line">    &#125;</div><div class="line">  &lt;/style&gt;</div><div class="line">&lt;div class=<span class="string">"container"</span>&gt;</div><div class="line">    &lt;div class=<span class="string">"page-header"</span>&gt;</div><div class="line">      &lt;h1&gt;Drag&amp;Drop&lt;/h1&gt;&lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"jumbotron"</span>&gt;</div><div class="line">      &lt;p&gt;这是一段文字&lt;/p&gt;</div><div class="line">      &lt;img src=<span class="string">"toy.png"</span> alt=<span class="string">""</span>&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div id=<span class="string">"target"</span>&gt;</div><div class="line">      Drag something into here</div><div class="line">      &lt;ul id=<span class="string">"result"</span> class=<span class="string">"list-group"</span>&gt;&lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    (<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">      // 找到目标位置框框</div><div class="line">      var target = document.querySelector(<span class="string">'#target'</span>);</div><div class="line">      var fileList = document.querySelector(<span class="string">'#result'</span>);</div><div class="line">      // 注册拖拽进入</div><div class="line">      target.addEventListener(<span class="string">'dragenter'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        this.classList.add(<span class="string">'actived'</span>);</div><div class="line">      &#125;);</div><div class="line">      // 离开</div><div class="line">      target.addEventListener(<span class="string">'dragleave'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        this.classList.remove(<span class="string">'actived'</span>);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      // 如果想要捕获drop事件 就一定得在该事件中阻止默认事件</div><div class="line">      target.addEventListener(<span class="string">'dragover'</span>, <span class="keyword">function</span>(e) &#123;</div><div class="line">        e.preventDefault();</div><div class="line">        e.stopPropagation();</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      // 当元素放到该对象上</div><div class="line">      target.addEventListener(<span class="string">'drop'</span>, <span class="keyword">function</span>(e) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (e.dataTransfer.files.length) &#123;</div><div class="line">          var files = e.dataTransfer.files;</div><div class="line">          <span class="keyword">for</span> (var i = 0; i &lt; files.length; i++) &#123;</div><div class="line">            var li = document.createElement(<span class="string">'li'</span>);</div><div class="line">            li.setAttribute(<span class="string">'class'</span>, <span class="string">'list-group-item'</span>);</div><div class="line">            // 创建信息的子节点</div><div class="line">            li.innerHTML = <span class="string">'&lt;h5 class="list-group-item-heading"&gt;'</span> </div><div class="line">            + files[i].name + <span class="string">'&lt;/h5&gt;&lt;p class="list-group-item-text"&gt;'</span> </div><div class="line">            + files[i].lastModifiedDate.toLocaleDateString() </div><div class="line">            + <span class="string">' '</span> + files[i].lastModifiedDate.toLocaleTimeString() </div><div class="line">            + <span class="string">' '</span> + (files[i].size / 1024).toFixed(2) + <span class="string">'KB&lt;/p&gt;'</span>;</div><div class="line">            fileList.appendChild(li);</div><div class="line">          &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          // 短路运算</div><div class="line">           /*var data = e.dataTransfer.getData(<span class="string">'text/plain'</span>)</div><div class="line">           || e.dataTransfer.getData(<span class="string">'text/uri-list'</span>);*/</div><div class="line">          var data = e.dataTransfer.getData(<span class="string">'text/plain'</span>);</div><div class="line">          <span class="keyword">if</span> (data) &#123;</div><div class="line">            // 拖入的是文本</div><div class="line">            target.innerHTML = data;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            var img = document.createElement(<span class="string">'img'</span>);</div><div class="line">            img.src = e.dataTransfer.getData(<span class="string">'text/uri-list'</span>);</div><div class="line">            target.appendChild(img);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        this.classList.remove(<span class="string">'actived'</span>);</div><div class="line"></div><div class="line">        e.preventDefault();</div><div class="line">        e.stopPropagation();</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125;)();</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>&emsp;&emsp;提供window.history，对象我们可以管理历史记录，可用于单页面应用，Single Page Application，可以无刷新改变网页内容。<br>旧版本浏览器：</p>
<ul>
<li>history.back() 回退</li>
<li>history.forward() 前进</li>
</ul>
<h3 id="自定义属性-1"><a href="#自定义属性-1" class="headerlink" title="自定义属性"></a>自定义属性</h3><h3 id="新增API-1"><a href="#新增API-1" class="headerlink" title="新增API"></a>新增API</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; &amp;lt; meta name = “description” content = “” &amp;gt; &lt;/strong&gt;&lt;br&gt;只要设置”description”，那么百度搜索结果就能显示这些语句，这个叫SEO搜索引擎优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &amp;lt; meta name = “keywords” content = “” &amp;gt; &lt;/strong&gt;&lt;br&gt;设置关键字，告诉搜索引擎，这个网页是干嘛用的，提高搜索命中率。&lt;br&gt;设置网页的title标题，也能助于SEO搜索引擎优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; HTML中所有文字之间，如果有空格、换行、tab，都将作为一个空格显示 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 容器级的标签里面可以放置任何标签；文本级的标签只能放文字、图片、表单元素；其它的一律不能放。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>node.js</title>
    <link href="http://yoursite.com/2017/07/20/node-js/"/>
    <id>http://yoursite.com/2017/07/20/node-js/</id>
    <published>2017-07-20T08:34:35.000Z</published>
    <updated>2017-07-22T06:05:16.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Node环境"><a href="#1-Node环境" class="headerlink" title="1.Node环境"></a>1.Node环境</h2><h3 id="1-1-什么是Node"><a href="#1-1-什么是Node" class="headerlink" title="1.1.什么是Node"></a>1.1.什么是Node</h3><ul>
<li>Node.js 可能类似jquery.js</li>
<li>不是JS文件，也不是一个JS框架（）</li>
<li>而是Server side Javascript runtime, 服务端的一个JS运行时</li>
<li>我们可以在NODE运行JS代码</li>
<li>alert();ECMAScript  JS- ES  BOM  DOM</li>
<li>node中只能运行ECMAScript，无法使用 BOM 和 DOM</li>
<li>目前我们的JS是运行在浏览器内核中</li>
<li>PHP是什么？是一门脚本语言也是一个运行环境</li>
<li>为什么Node选中了JS，<a id="more"></a></li>
<li><p>说到底就是一个JS运行环境</p>
</li>
<li><p>目前有两个分支</p>
<ul>
<li>Node.js 0.12.7 官方版本 要求尽善尽美</li>
<li><p>IO.js 是社区的产物，不是官方的东西，io.js有很多新特性，迭代非常快，社区推进非常快</p>
</li>
<li><p>15年两者合并，发布node第一个正式版 4.0， 迭代速度又慢了</p>
</li>
<li>node 5.x == io.js</li>
<li>node 4.0 == node</li>
</ul>
</li>
</ul>
<h3 id="1-2-Node环境搭建"><a href="#1-2-Node环境搭建" class="headerlink" title="1.2.Node环境搭建"></a>1.2.Node环境搭建</h3><h4 id="1-2-1-Mac"><a href="#1-2-1-Mac" class="headerlink" title="1.2.1.Mac"></a>1.2.1.Mac</h4><ul>
<li>安装包的方式<ul>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0.pkg" target="_blank" rel="external">pkg</a></li>
</ul>
</li>
<li><p>NVM（Node Version Manager）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'. ~/.nvm/nvm.sh'</span> &gt;&gt; .bash_profile</div><div class="line">$ nvm install stable</div><div class="line">$ nvm <span class="built_in">alias</span> default stable</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="1-2-2-Windows"><a href="#1-2-2-Windows" class="headerlink" title="1.2.2.Windows"></a>1.2.2.Windows</h4><ul>
<li>安装包的方式<ul>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0-x64.msi" target="_blank" rel="external">msi_x64</a></li>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0-x86.msi" target="_blank" rel="external">msi_x86</a></li>
</ul>
</li>
<li>NVM（Node Version Manager）</li>
<li>nvm(node version manager)</li>
<li>因为NODE版本比较多，开发人员可能依赖很多版本</li>
<li><p>通过NVM，可以轻松切换于不同的版本之间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
</ul>
<p>NVM_HOME=C:\Develop\nvm</p>
<p>NVM_SYMLINK=C:\Develop\nodejs</p>
<p>NPM_HOME=C:\Develop\nvm\npm</p>
<p>PATH=%NVM_HOME%;%NVM_SYMLINK%;%NPM_HOME%</p>
<h4 id="1-2-3-环境变量"><a href="#1-2-3-环境变量" class="headerlink" title="1.2.3.环境变量"></a>1.2.3.环境变量</h4><ul>
<li><p>环境变量就是操作系统提供的系统级别用于存储变量的地方</p>
</li>
<li><p>系统变量和用户变量</p>
</li>
<li>系统变量指的是所用当前系统用户共享的变量</li>
<li>自己的电脑一般只有一个用户</li>
<li><p>建议将自己配置的环境变量放在用户变量中，用户变量比较干净</p>
</li>
<li><p>环境变量的变量名是不区分大小写的</p>
</li>
<li><p>变量间运行相互引用</p>
</li>
<li><p>特殊值：</p>
</li>
<li>PATH变量（不区分大小写）</li>
<li>PATH 相当于一个路径的引用</li>
<li><p>只要添加到PATH变量中的路径，都可以在任何目录下搜索</p>
</li>
<li><p>命令行</p>
</li>
<li>可以用来执行当前目录下的文件</li>
<li>命令</li>
</ul>
<p>cd :change directory</p>
<ul>
<li>Node.js是一个轻内核（本身没有什么功能）的东东，所有的功能都要功能包提供</li>
<li>node官方提供了一些最基础的包</li>
</ul>
<h3 id="1-3-Node用途"><a href="#1-3-Node用途" class="headerlink" title="1.3.Node用途"></a>1.3.Node用途</h3><h4 id="REPL环境（控制台环境）"><a href="#REPL环境（控制台环境）" class="headerlink" title="REPL环境（控制台环境）"></a>REPL环境（控制台环境）</h4><h4 id="1-3-1-开发Web应用程序"><a href="#1-3-1-开发Web应用程序" class="headerlink" title="1.3.1.开发Web应用程序"></a>1.3.1.开发Web应用程序</h4><ul>
<li>做动态网站</li>
<li>开发提供数据的服务端API</li>
</ul>
<h4 id="1-3-2-前端开发工具基础"><a href="#1-3-2-前端开发工具基础" class="headerlink" title="1.3.2.前端开发工具基础"></a>1.3.2.前端开发工具基础</h4><ul>
<li>Node.js给前端乃至整个开发行业带来一场工业革命</li>
<li>刀跟火种</li>
</ul>
<h3 id="1-4-Node开发Web应用Demo"><a href="#1-4-Node开发Web应用Demo" class="headerlink" title="1.4.Node开发Web应用Demo"></a>1.4.Node开发Web应用Demo</h3><h4 id="1-4-1-复习请求与响应"><a href="#1-4-1-复习请求与响应" class="headerlink" title="1.4.1.复习请求与响应"></a>1.4.1.复习请求与响应</h4><p>客户端发送到服务端的东西称之为请求报文<br>服务端返回给客户端的东西称之为响应报文</p>
<h3 id="1-5-NPM"><a href="#1-5-NPM" class="headerlink" title="1.5.NPM"></a>1.5.NPM</h3><h4 id="1-5-1-什么是NPM"><a href="#1-5-1-什么是NPM" class="headerlink" title="1.5.1.什么是NPM"></a>1.5.1.什么是NPM</h4><p><a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p>
<ul>
<li>Node Package Manager</li>
<li>Node应用程序依赖包的管理工具</li>
<li>安装卸载更新之类的操作</li>
</ul>
<h4 id="1-5-2-为什么使用NPM"><a href="#1-5-2-为什么使用NPM" class="headerlink" title="1.5.2.为什么使用NPM"></a>1.5.2.为什么使用NPM</h4><ul>
<li>包很多</li>
<li>场景：我需要用一个A，A依赖B，B依赖C</li>
<li>常见的包管理工具都有循环依赖的功能</li>
<li>你只需记住你要什么东西</li>
</ul>
<h4 id="1-5-3-常见的NPM操作"><a href="#1-5-3-常见的NPM操作" class="headerlink" title="1.5.3.常见的NPM操作"></a>1.5.3.常见的NPM操作</h4><p>// 安装一个包，默认安装最新稳定版本<br>npm install package_name<br>// –save<br>// 初始化操作，给项目添加一个配置文件<br>npm init<br>// –yes参数走默认配置</p>
<ul>
<li>如果官方数据源太慢使用</li>
<li><a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a></li>
</ul>
<hr>
<h2 id="2-Bower"><a href="#2-Bower" class="headerlink" title="2.Bower"></a>2.Bower</h2><h3 id="2-1-什么是Bower"><a href="#2-1-什么是Bower" class="headerlink" title="2.1.什么是Bower"></a>2.1.什么是Bower</h3><ul>
<li><a href="http://bower.io/" target="_blank" rel="external">官网</a></li>
<li>web应用程序依赖项管理工具</li>
</ul>
<h3 id="2-2-为什么使用Bower"><a href="#2-2-为什么使用Bower" class="headerlink" title="2.2.为什么使用Bower"></a>2.2.为什么使用Bower</h3><ul>
<li>方便便捷的方式管理包，zhuangbi</li>
</ul>
<h3 id="2-3-Bower实践"><a href="#2-3-Bower实践" class="headerlink" title="2.3.Bower实践"></a>2.3.Bower实践</h3><ul>
<li><p>npm install -g bower // -g:global</p>
</li>
<li><p>修改npm全局路径，就是在用户目录下添加.npmrc文件</p>
</li>
</ul>
<hr>
<h2 id="3-Sass-LESS"><a href="#3-Sass-LESS" class="headerlink" title="3.Sass/LESS"></a>3.Sass/LESS</h2><hr>
<h2 id="4-Gulp"><a href="#4-Gulp" class="headerlink" title="4.Gulp"></a>4.Gulp</h2><h3 id="4-1-Gulp简介"><a href="#4-1-Gulp简介" class="headerlink" title="4.1.Gulp简介"></a>4.1.Gulp简介</h3><ul>
<li>链接：<ul>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">中文网</a></li>
</ul>
</li>
<li>就是用来机械化的完成重复性质的工作</li>
<li>gulp的机制就是将重复工作抽象成一个个的任务，</li>
</ul>
<h3 id="4-2-Gulp准备工作"><a href="#4-2-Gulp准备工作" class="headerlink" title="4.2.Gulp准备工作"></a>4.2.Gulp准备工作</h3><ul>
<li>安装Node.js</li>
<li>安装 gulp 命令行工具<ul>
<li><code>npm install -g gulp</code></li>
</ul>
</li>
<li>初始化 gulp 项目</li>
<li>创建任务 - gulpfile.js</li>
</ul>
<h3 id="4-3-基本使用"><a href="#4-3-基本使用" class="headerlink" title="4.3.基本使用"></a>4.3.基本使用</h3><h3 id="4-4-常用插件"><a href="#4-4-常用插件" class="headerlink" title="4.4.常用插件"></a>4.4.常用插件</h3><ul>
<li><a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="external">编译 Less：gulp-less</a></li>
<li><a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">创建本地服务器：gulp-connect</a></li>
<li><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">合并文件：gulp-concat</a></li>
<li><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external">最小化 js 文件：gulp-uglify</a></li>
<li><a href="https://www.npmjs.com/package/gulp-rename" target="_blank" rel="external">重命名文件：gulp-rename</a></li>
<li><a href="https://www.npmjs.com/package/gulp-minify-css" target="_blank" rel="external">最小化 css 文件：gulp-minify-css</a></li>
<li><a href="https://www.npmjs.com/package/gulp-minify-html" target="_blank" rel="external">压缩html文件 gulp-minify-html</a></li>
<li><a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="external">最小化图像：gulp-imagemin</a></li>
</ul>
<hr>
<h2 id="5-Git"><a href="#5-Git" class="headerlink" title="5.Git"></a>5.Git</h2><h3 id="5-1-什么是GIT，什么是GITHUB"><a href="#5-1-什么是GIT，什么是GITHUB" class="headerlink" title="5.1.什么是GIT，什么是GITHUB"></a>5.1.什么是GIT，什么是GITHUB</h3><ul>
<li>GIT</li>
<li>GITHUB</li>
</ul>
<h3 id="5-2-环境安装"><a href="#5-2-环境安装" class="headerlink" title="5.2.环境安装"></a>5.2.环境安装</h3><h3 id="5-3-GIT常用命令"><a href="#5-3-GIT常用命令" class="headerlink" title="5.3.GIT常用命令"></a>5.3.GIT常用命令</h3><hr>
<h2 id="6-Markdown"><a href="#6-Markdown" class="headerlink" title="6.Markdown"></a>6.Markdown</h2><p><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">https://guides.github.com/features/mastering-markdown/</a><br><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">https://help.github.com/articles/github-flavored-markdown/</a><br><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">https://help.github.com/articles/markdown-basics/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Node环境&quot;&gt;&lt;a href=&quot;#1-Node环境&quot; class=&quot;headerlink&quot; title=&quot;1.Node环境&quot;&gt;&lt;/a&gt;1.Node环境&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是Node&quot;&gt;&lt;a href=&quot;#1-1-什么是Node&quot; class=&quot;headerlink&quot; title=&quot;1.1.什么是Node&quot;&gt;&lt;/a&gt;1.1.什么是Node&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Node.js 可能类似jquery.js&lt;/li&gt;
&lt;li&gt;不是JS文件，也不是一个JS框架（）&lt;/li&gt;
&lt;li&gt;而是Server side Javascript runtime, 服务端的一个JS运行时&lt;/li&gt;
&lt;li&gt;我们可以在NODE运行JS代码&lt;/li&gt;
&lt;li&gt;alert();ECMAScript  JS- ES  BOM  DOM&lt;/li&gt;
&lt;li&gt;node中只能运行ECMAScript，无法使用 BOM 和 DOM&lt;/li&gt;
&lt;li&gt;目前我们的JS是运行在浏览器内核中&lt;/li&gt;
&lt;li&gt;PHP是什么？是一门脚本语言也是一个运行环境&lt;/li&gt;
&lt;li&gt;为什么Node选中了JS，
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/20/hello-world/"/>
    <id>http://yoursite.com/2017/07/20/hello-world/</id>
    <published>2017-07-20T06:35:06.767Z</published>
    <updated>2017-07-20T06:35:06.767Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
